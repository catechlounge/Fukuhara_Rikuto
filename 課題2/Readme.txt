# データの前処理
CIFAR-10データセットを使用して始めました。torchvisionというPythonライブラリを用いてデータの収集を行いました。データセットは10クラスの32x32ピクセルのカラー画像から構成されています。データ拡張の手法として、RandomAffineやRandomHorizontalFlipを用いてデータセットを増強し、モデルの汎用性とロバスト性を向上させました。さらに、Normalize変換を使用してデータを正規化し、モデルの学習を助けました。

# 初期モデルの採用とその限界
最初に使用したモデルはMLP（Multi Layer Perceptron）でした。これは3層の全結合層で構成されており、Leaky ReLUを活性化関数として使用していました。しかし、このモデルでは最大50%の正解率にしか達せず、エポック数を増やすとすぐに過学習が起きてしまうという問題がありました。

# CNNへの切り替えとその設計
MLPの限界を認識したのち、畳み込みネットワーク (CNN) に切り替えました。このネットワークの設計はAlexNetを参考にしており、その設計は追加的に修正され、正解率に基づいて層が追加されました。

# 最終モデルの詳細
最終的なモデルは8層の畳み込み層から構成されています。各層ではReLUを活性化関数として使用し、バッチ正規化を行いました。これにより、ネットワークの学習速度を向上させ、過学習を防ぎました。また、2Dドロップアウトを用いて、ネットワークの汎化能力を向上させました。最大プーリングを用いて特徴マップの次元を縮小し、計算負荷を減らしました。最終的な全結合層では、ソフトマックス活性化関数を使用して10クラス分類の確率を出力しています。

# APIの作成
fastAPIを使用し、APIを構築しました。
8つの畳み込み層、ReLU活性化関数、バッチ正規化、ドロップアウト、最大プーリングを使用しソフトマックス関数をしようしたAlexNet風の畳み込みニューラルネットワークモデル（Net）を使用し、推定する。
次に、学習済みのモデルのパラメータをロードし、モデルを評価モードに設定し、利用可能であればGPUを使用するように設定しています。
この後、FastAPIを使用してAPIを設定します。FastAPIのインスタンスを生成し、画像の受取りと予測結果の返却を行うエンドポイントを定義しています。
このエンドポイントでは、POSTリクエストで送られてくる画像ファイルを受け取り、画像をリサイズしてテンソルに変換し、正規化します。
その後、この画像データをミニバッチの形に変換し、モデルに入力してクラスの予測を行っています。
最終的に、最高のスコアを持つクラスを選択し、そのクラス名とスコアをクライアントにかえします。